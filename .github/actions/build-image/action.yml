name: Build Image

inputs:
  context:
    description: 'The build context directory'
    required: false
    default: '.'
  dockerfile:
    description: 'The path to the Dockerfile to build'
    required: false
    default: 'Containerfile'
  image-name:
    description: 'The name of the image to build'
    required: true
  image-tags:
    description: 'The tags to apply to the image'
    required: true
  build-args:
    description: 'Build arguments to pass to the Docker build'
    required: false
    default: ''
  builder:
    description: 'The name of the builder to use (docker or podman)'
    required: false
    default: 'podman'
  registry-aws-iam-role:
    description: 'The IAM role to assume when pushing to the registry'
    required: false
  registry-aws-region:
    description: 'The region of the registry'
    required: false

outputs:
  image:
    description: 'The name of the built image'
    value: ${{ steps.set-outputs.outputs.image }}
  tags:
    description: 'The tags applied to the built image'
    value: ${{ steps.set-outputs.outputs.tags }}
  digest:
    description: 'The digest of the built image'
    value: ${{ steps.set-outputs.outputs.digest }}
  builder:
    description: 'The builder used to build the image'
    value: ${{ inputs.builder }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      id: validate-inputs
      shell: bash
      run: |
        valid_builders=("docker" "podman")
        if [[ ! "${valid_builders[@]}" =~ "${{ inputs.builder }}" ]]; then
          echo "Invalid builder: ${{ inputs.builder }}"
          exit 1
        fi

    - name: Build (Podman)
      if: ${{ inputs.builder == 'podman' }}
      id: build-podman
      uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
      with:
        context: ${{ inputs.context }}
        containerfiles: ${{ inputs.context }}/${{ inputs.dockerfile }}
        image: ${{ inputs.image-name }}
        tags: ${{ inputs.image-tags }}
        build-args: ${{ inputs.build-args }}

    - name: Generate Metadata (Docker)
      if: ${{ inputs.builder == 'docker' }}
      id: generate-action-metadata-docker
      shell: bash
      run: |
        # Reading space-separated list into an array
        IFS=' ' read -r -a tag_array <<< "${{ inputs.image-tags }}"

        # Iterate over all tag inputs and prepend the image name
        tags=""
        for tag in "${tag_array[@]}"; do
          tags+="${{ inputs.image-name }}:$tag, "
        done
        # Remove trailing comma and space
        tags="${tags%,}"
        echo "tags=$tags" >> $GITHUB_OUTPUT

    - name: Build (Docker)
      if: ${{ inputs.builder == 'docker' }}
      id: build-docker
      uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.context }}/${{ inputs.dockerfile }}
        tags: ${{ steps.generate-action-metadata-docker.outputs.tags }}
        build-args: ${{ inputs.build-args }}
        push: false

    - name: Set Outputs
      id: set-outputs
      shell: bash
      env:
        BUILDER: ${{ inputs.builder }}
      run: |
        echo "image=${{ inputs.image-name }}" >> $GITHUB_OUTPUT
        echo "tags=${{ inputs.image-tags }}" >> $GITHUB_OUTPUT
